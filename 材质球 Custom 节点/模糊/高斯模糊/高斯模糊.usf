// 高斯模糊

struct FunctionStruct
{
    //计算一维高斯模糊
    float Cal_1DGaussian(float x)
    {
        return exp(-0.5f * pow(3.141 * x, 2));
    }
};


// 参考链接1-维基百科：https://zh.wikipedia.org/wiki/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A
// 参考链接2-博客：https://www.raywenderlich.com/57-unreal-engine-4-custom-shaders-tutorial
// 参考链接3-百度百科：https://baike.baidu.com/item/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/10885810
// 参考链接4-知乎：https://zhuanlan.zhihu.com/p/158683846
// // 纹理坐标，纹素尺寸，2D 纹理采样，模糊半径
// float3 fun(float2 UV, float2 TexelSize, Texture2DSampler Texture, float Radius)
// {

    FunctionStruct FS;

    //用于存储累积的颜色
    float3 PixelSum = float3(0, 0, 0);
    //累积权重值
    float WeightSum = 0;

    for (int x = -Radius; x <= Radius; x++)
    {
        for (int y = -Radius; y <= Radius; y++)
        {
            // UV 偏移
            float2 UVOffset = float2(UV.x + x * TexelSize.x, UV.y + y * TexelSize.y);
            // 获取偏移的颜色
            float3 PixelColor = Texture2DSample(Texture, Material.Texture2D_0Sampler, UVOffset);
            // 获取对应的权重值
            float weight = FS.Cal_1DGaussian(x / Radius) * FS.Cal_1DGaussian(y / Radius);
            //累加颜色
            PixelSum += PixelColor*weight;
            //累加权重值
            WeightSum += weight;
        }
    }
    return float3(PixelSum / WeightSum);
// }
